#include<iostream>
using namespace std;
#define size 100
class PriorityQueue{
	int data[size];
	int count;
	
	public:
	  	PriorityQueue()
	  	{
	  		count = 0;
		  }
		 
		 void enqueue(int x){
		 	if(count == size)
		 	{
		 		cout<<"Queue Overflow !\n";
		 		return;
			 }
			 int top = count-1;
			 
			 while(top>=0 && data[top] < x)
			 {
			 	data[top+1] = data[top];
			 	top--;
			 }
			 
			 data[top+1] = x;
			 count++;
		}
		
		void dequeue()
		{
			if(isEmpty())
			{
				cout<<"Queue Underflow \n";
				return;
			}
			
			cout<<"Dequeued element :"<<data[0]<<endl;
			
			
			for(int i=1;i<count;i++)
			{
				data[i-1] = data[i];
			}
			count--;
		 } 
		 bool isEmpty()
		 {
		 	return count ==0;
		 }
		 int peek()
		 {
		 	if(isEmpty())
		 	{
		 		cout<<"Queue Underflow !\n";
		 		return -1;
			 }
			 cout<<"The peeked element is :"<<data[0];
			 
		 }
		 
		 void display()
		 {
		 	if(isEmpty())
		 	{
		 		cout<<"Queue is Empty\n";
		 		return;
			 }
			 cout<<"Priority Queue :";
			 
			 for(int i=0;i<count;i++)
			 {
			 	cout<<data[i]<<" ";
			 }
			 cout<<endl;
		 }
};

int main()
{
	 PriorityQueue pq;
	int value,choice;
	
	do {
        cout << "\n1. Enqueue\n2. Dequeue\n3. Peek\n4. Display\n5. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                pq.enqueue(value);
                break;
            case 2:v
                pq.dequeue();
                break;
            case 3:
                cout << "Top priority element: " << pq.peek() << endl;
                break;
            case 4:
                pq.display();
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }

    } while (choice != 5);

    return 0;

}
