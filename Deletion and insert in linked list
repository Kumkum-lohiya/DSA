#include<iostream>
using namespace std;
class Node{
    public:
    	
	int data;
	Node *next;
	
		Node(int value)
		{
			data = value;
			next = nullptr;
		}	
};

void InsertAtFront(Node *&start,int value)
{
	
	Node * newNode = new Node(value);

	if(start == nullptr)
	{
		start = newNode;
	}
	else{
		newNode->next = start;
		start = newNode;
	}	
}

void InsertAtEnd(Node*& start,int value)
{
	Node * temp = nullptr;
	Node* newNode = new Node(value);
	temp = start;
	if(start == nullptr)
		start = newNode;
	else{
		while(temp->next != nullptr)
			temp = temp->next;
		temp->next = newNode;	
	}
}
void InsertAtMiddle(Node* &start,int value)
{
	int info;
	Node * temp = nullptr;
	Node * newNode = new Node(value);
	
	cout<<"Enter the information after which you want to insert the node :";
	cin>>info;
	
	temp = start;
	while(temp->next != nullptr )
	{
		if(temp->data == info)
		{
			break;
		}
		else temp =temp->next;
	}

	if(temp->next == start && temp->data != info)
	{
		cout<<"Data not found \n";
	}
	newNode->next =temp->next;
	temp->next = newNode;
	cout<<"Node is Inserted \n";
	
	
	
}
void InsertAfterPos(Node *& start,int value)
{
	int pos,ctr=1;
	Node *temp =nullptr;
	Node * newNode = new Node(value);
	temp = start;
	cout<<"Enter the position after which you want to insert the newNode:";
	cin>>pos;
//	if(pos>count)
//	{
//		cout<<"Invalid Position \n";
//	}

		while(ctr<pos)
		{
			ctr++;
			temp = temp->next;
		}
		newNode->next = temp->next;
		temp->next = newNode;
}
void InsertAtPos(Node *& start,int value)
{
	int pos,ctr = 1;
	Node * temp = start;
	Node * newNode = new Node(value);
	cout<<"Enter the position after which you want to insert the newNode:";
	cin>>pos;
	while(ctr<pos-1)
	{
		ctr++;
		temp = temp->next;
	}
	newNode->next = temp->next;
	temp->next = newNode;
}
void DeleteAtFront(Node *& start)
{
	Node *temp = start;
	
	if(start == nullptr)
		cout<<"\nEmpty linked List\n";
	else{
		start = start->next;
		free(temp);
		cout<<"Node deleted from front\n";
	}	
}
void DeleteAtEnd(Node *& start)
{
	Node *temp =nullptr;
	temp = start;
	Node* prev = nullptr;
	if(start == nullptr)
		cout<<"Underflow !\n";
	else if(start->next == nullptr)
	{
		free(temp);
		start = nullptr;
	}
	else{
		
        while (temp->next != nullptr) 
	{
        prev = temp;
        temp = temp->next;
    }
       if (prev != nullptr) 
	   {
       prev->next = nullptr;
}
free(temp);

	}
}
void DeleteAtMiddle(Node *& start ,int value)
{
	Node * temp = nullptr;
	Node * ptr = nullptr;
	Node * newNode = new Node(value);
	int info;
	cout<<"Enter the data after which you want to delete  Node ";
	cin>>info;
	temp = start;
	while(temp != nullptr)
	{
		if(temp->data == info)
			break;
		else {
			ptr = temp;
			temp = temp->next;
		}
	}
	if(temp == nullptr)
	{
		cout<<"\n Not Found !";
		return;
	}
	ptr->next = temp->next;
	free(temp);
	
}
void DeleteFromPos(Node *& start)
{
	Node * temp = nullptr;
	Node * ptr = nullptr;
	int pos,count =0;
	cout<<"Enter the position after which you want to delete the node :";
	cin>>pos;
	temp = start;
	while(count<pos)
	{
		count++;
		ptr = temp;
		temp = temp->next;
	}
	ptr->next = temp->next;
	free(temp);
}
void DeleteAtPos(Node *& start)
{
	Node * temp = start;
	Node * ptr = nullptr;
	int pos;
	int count =0;
	cout<<"Enter the position at which you want to delete the node :";
	cin>>pos;
	while(count<pos-1)
	{
		count++;
		ptr = temp;
		temp = temp->next;
	}
	ptr->next = temp->next;
	free(temp);
}
void display(Node*start)
{
	Node * temp = start;
	while(temp!= nullptr)
	{
		cout<<temp->data<<" -> ";
		temp = temp->next;
	}
	cout<<"NULL\n";
}
void DeletionOfList(Node *& start)
{
	Node * temp;
	while(start != nullptr)
	{
		temp = start;
		start = start->next;
		free(temp);	
	}
	cout<<"All Nodes are deleted :";
}
int main()
{
	Node*start = nullptr;
	int value,choice;
	do
	{ cout<<"Enter the choice \n1.Insert at front\n2.Insert at end\n3.Insert at middle\n4.Insert after postition\n5.Insert at postion\n6.Delete at front\n7.Delete at end\n8.Delete at middle\n9.Delete From position\n10.Delete at position\n11.deletion of entire list\n12.Display\n13.Exit():\n";
	cin>>choice;
	switch(choice)
	{
		case 1 :
	  		cout<<"Enter the value :";
	  		cin>>value;
	  		InsertAtFront(start,value);
	  		break;
	  	case 2 :
		  	cout<<"Enter the value :";
			cin>>value;
			InsertAtEnd(start,value);
			break;
		case 3 :
			cout<<"Enter the value :";
			cin>>value;
			InsertAtMiddle(start,value);
			break;
		case 4 :
			cout<<"Enter the value :";
			cin>>value;
			InsertAfterPos(start,value);
			break;
		case 5 :
			cout<<"Enter the value :";
			cin>>value;
			InsertAtPos(start,value);
			break;
		case 6 :
			DeleteAtFront(start);
			break;
		case 7 :
			DeleteAtEnd(start);
			break;
		case 8 :
            cout << "Enter the value :";
    		cin >> value;
    		DeleteAtMiddle(start, value);
    		break;
		case 9 :
		 	DeleteFromPos(start);
			break;
		case 10 :
			DeleteAtPos(start);
			break;
		case 11 :
			DeletionOfList(start);
			break;								
	  	case 12:
		  	display(start);
		    break;
		case 13:	
			cout<<"Exiting the program :"<<endl;
			break;
		default :cout<<"Invalid Choice !"<<endl;			
	}	
}
    while(choice != 13);
}
